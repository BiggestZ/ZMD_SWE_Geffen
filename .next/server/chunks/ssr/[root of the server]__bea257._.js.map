{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/components/connectToDB.tsx"],"sourcesContent":["// Function to connect to the database\r\nimport mysql from 'mysql2/promise';\r\n\r\ninterface ConnectionParams { \r\n    host: string;\r\n    user: string;\r\n    password: string;\r\n    database: string;\r\n}\r\n\r\n// Database connection function\r\nasync function connectToDb(): Promise<mysql.Connection | null> { // Replace these with your own database connection parameters\r\n    // Connection parameters\r\n    const connectionParameters: ConnectionParams = {\r\n        host: 'sql.cianci.io',      \r\n        user: 'acheng2',\r\n        password: 'cl6g*t5URndDuZxe',\r\n        database: '2024fall_comp367_geffen',\r\n    };\r\n\r\n    try {\r\n        const connection = await mysql.createConnection(connectionParameters);\r\n        console.log(\"Connected to the database successfully.\");\r\n        return connection;\r\n    } catch (error) {\r\n        console.error(\"Error connecting to the database:\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default connectToDb;\r\n"],"names":[],"mappings":"AAAA,sCAAsC;;;;AACtC;;AASA,+BAA+B;AAC/B,eAAe;IACX,wBAAwB;IACxB,MAAM,uBAAyC;QAC3C,MAAM;QACN,MAAM;QACN,UAAU;QACV,UAAU;IACd;IAEA,IAAI;QACA,MAAM,aAAa,MAAM,iIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QAChD,QAAQ,GAAG,CAAC;QACZ,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO;IACX;AACJ;uCAEe"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/components/book_entry.tsx"],"sourcesContent":["import connectToDb from \"./connectToDB\";\r\nimport mysql from \"mysql2/promise\";\r\nimport { Book } from \"@/types\";\r\n\r\n// Function to search for books by title\r\nasync function searchBookByTitle(title: string): Promise<void> {\r\n    const connection = await connectToDb();\r\n    if (!connection) return;\r\n    try {\r\n        const [result] = await connection.execute(\r\n            \"SELECT * FROM Books WHERE Title LIKE ?\",\r\n            [`%${title}%`]\r\n        );\r\n\r\n        const books = result as any[];\r\n\r\n        if (books.length > 0) {\r\n            console.log(\"Search Results:\");\r\n            for (const book of books) {\r\n                console.log(`Title: ${book.Title}`);\r\n                console.log(`Author: ${book.Author}`);\r\n                console.log(`ISBN: ${book.ISBN}`);\r\n                console.log(`Description: ${book.BookDesc}`);\r\n                console.log(\"-\".repeat(40));\r\n            }\r\n        } else {\r\n            console.log(\"No books found with that title.\");\r\n        }\r\n    } catch (error) {\r\n        console.error(`Error searching for book: ${(error as Error).message}`);\r\n    } finally {\r\n        await connection.end();\r\n    }\r\n}\r\n\r\n// Function to validate author's name\r\nfunction isValidAuthorName(author: string): boolean {\r\n    return /^[A-Za-z\\s]+$/.test(author);\r\n}\r\n\r\n// Function to get subtopic ID\r\nasync function getSubtopicId(subtopicName: string, topicName: string, connection: mysql.Connection): Promise<number | null> {\r\n    if (!connection) return null;\r\n    const [topicResult] = await connection.execute(\r\n        \"SELECT TopicID FROM Topics WHERE TopicName = ?\",\r\n        [topicName]\r\n    );\r\n    const topic = (topicResult as any[])[0];\r\n\r\n    if (!topic) {\r\n        console.log(`Topic '${topicName}' does not exist in the database.`);\r\n        return null;\r\n    }\r\n\r\n    const [subtopicResult] = await connection.execute(\r\n        \"SELECT SubtopicID FROM Subtopics WHERE SubtopicName = ? AND TopicID = ?\",\r\n        [subtopicName, topic.TopicID]\r\n    );\r\n    const subtopic = (subtopicResult as any[])[0];\r\n\r\n    if (!subtopic) {\r\n        console.log(`Subtopic '${subtopicName}' under topic '${topicName}' does not exist in the database.`);\r\n        return null;\r\n    }\r\n\r\n    return subtopic.SubtopicID;\r\n}\r\n\r\n// Function to add a book with multiple topics and subtopics\r\nasync function addBook(title: string, author: string, isbn: string, description: string): Promise<void> {\r\n    const connection = await connectToDb();\r\n    if (!connection) return;\r\n    try {\r\n        // Validate ISBN length\r\n        if (isbn.length !== 13 || !/^\\d+$/.test(isbn)) {\r\n            console.log(\"Error: ISBN must be exactly 13 characters long and contain only numbers.\");\r\n            return;\r\n        }\r\n\r\n        // Validate author's name\r\n        if (!isValidAuthorName(author)) {\r\n            console.log(\"Error: Author name can only contain letters and spaces.\");\r\n            return;\r\n        }\r\n\r\n        // Insert the book\r\n        await connection.execute(\r\n            \"INSERT INTO Books (Title, Author, ISBN, BookDesc) VALUES (?, ?, ?, ?)\",\r\n            [title, author, isbn, description]\r\n        );\r\n        await connection.commit();\r\n        console.log(`Book '${title}' added successfully.`);\r\n\r\n        // Prompt for topics and subtopics\r\n        while (true) {\r\n            const topicName = prompt(\"Enter topic name (or 'done' to finish): \");\r\n            if (topicName && topicName.toLowerCase() === 'done') break;\r\n\r\n            const subtopicName = prompt(\"Enter subtopic name (optional, press Enter to skip): \") || topicName;\r\n\r\n            // Check if the topic and subtopic exist in the database\r\n            const subtopicId = await getSubtopicId(subtopicName!, topicName!, connection);\r\n\r\n            // Only link the book if the subtopic exists\r\n            if (subtopicId) {\r\n                await connection.execute(\r\n                    \"INSERT INTO Book_SubTopics (ISBN, SubtopicID) VALUES (?, ?)\",\r\n                    [isbn, subtopicId]\r\n                );\r\n                await connection.commit();\r\n                console.log(`Linked '${title}' to topic '${topicName}' and subtopic '${subtopicName}'.`);\r\n            } else {\r\n                console.log(`Cannot link '${title}' to topic '${topicName}' and subtopic '${subtopicName}' as they are not found in the database.`);\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error(`Error adding book: ${(error as Error).message}`);\r\n    } finally {\r\n        await connection.end();\r\n    }\r\n}\r\n\r\n// Function to drop a book by title or ISBN\r\nasync function dropBook(titleOrIsbn: string): Promise<void> {\r\n    const connection = await connectToDb();\r\n    if (!connection) return;\r\n    try {\r\n        const [bookResult] = await connection.execute(\"SELECT ISBN FROM Books WHERE Title = ?\", [titleOrIsbn]);\r\n        const book = (bookResult as any[])[0];\r\n\r\n        if (!book) {\r\n            console.log(`No book found with title: '${titleOrIsbn}'.`);\r\n            return;\r\n        }\r\n\r\n        const isbn = book.ISBN;\r\n\r\n        // Delete all related entries in Book_SubTopics\r\n        await connection.execute(\"DELETE FROM Book_SubTopics WHERE ISBN = ?\", [isbn]);\r\n        console.log(`Deleted all subtopic links for book with ISBN ${isbn}.`);\r\n\r\n        // Delete the book itself\r\n        await connection.execute(\"DELETE FROM Books WHERE ISBN = ?\", [isbn]);\r\n        await connection.commit();\r\n        console.log(`Book with ISBN ${isbn} deleted successfully.`);\r\n\r\n    } catch (error) {\r\n        console.error(`Error dropping book: ${(error as Error).message}`);\r\n    } finally {\r\n        await connection.end();\r\n    }\r\n}\r\n\r\nasync function editBook(searchTerm: string): Promise<void> {\r\n    const connection = await connectToDb();\r\n    if (!connection) return;\r\n    try {\r\n        const [bookResult] = await connection.execute(\"SELECT * FROM Books WHERE Title = ?\", [searchTerm]);\r\n        const book = (bookResult as any[])[0];\r\n\r\n        if (!book) {\r\n            console.log(`No book found with title '${searchTerm}'.`);\r\n            return;\r\n        }\r\n  \r\n      console.log(`Editing book: ${book.title} by ${book.author}`);\r\n  \r\n      // Prompt for updates on book details\r\n      const newTitle = prompt(\"Enter new title (or leave blank to keep current): \") || book.title;\r\n      const newAuthor = prompt(\"Enter new author (or leave blank to keep current): \") || book.author;\r\n      const newIsbn = prompt(\"Enter new ISBN (or leave blank to keep current): \") || book.isbn;\r\n      const newDescription = prompt(\"Enter new description (or leave blank to keep current): \") || book.bookDesc;\r\n  \r\n      // Check if the ISBN is changing\r\n      const isIsbnChanging = newIsbn !== book.isbn;\r\n  \r\n      // Disable foreign key checks\r\n      await connection.query(\"SET FOREIGN_KEY_CHECKS=0\");\r\n  \r\n      // Update the book in the database\r\n      await connection.query(\r\n        \"UPDATE Books SET title = ?, author = ?, isbn = ?, bookDesc = ? WHERE isbn = ?\",\r\n        [newTitle, newAuthor, newIsbn, newDescription, book.isbn]\r\n      );\r\n  \r\n      if (isIsbnChanging) {\r\n        await connection.query(\"UPDATE Book_SubTopics SET ISBN = ? WHERE ISBN = ?\", [newIsbn, book.isbn]);\r\n        await connection.query(\"UPDATE Book_Language SET ISBN = ? WHERE ISBN = ?\", [newIsbn, book.isbn]);\r\n        console.log(`ISBN updated from '${book.isbn}' to '${newIsbn}' across all related tables.`);\r\n      }\r\n  \r\n      await connection.query(\"SET FOREIGN_KEY_CHECKS=1\");\r\n      console.log(\"Book details updated successfully.\");\r\n  \r\n      // Update subtopics (optional)\r\n      const updateSubtopics = prompt(\"Would you like to update the subtopics associated with this book? (yes/no): \")?.toLowerCase();\r\n  \r\n      if (updateSubtopics === \"yes\") {\r\n        const action = prompt(\"Choose an option:\\n1) Delete all existing subtopics and add new ones\\n2) Add new subtopics to existing ones\\n3) Leave existing subtopics as is\\nEnter 1, 2, or 3: \");\r\n  \r\n        if (action === '1') {\r\n          await connection.query(\"DELETE FROM Book_SubTopics WHERE ISBN = ?\", [newIsbn]);\r\n          console.log(\"Existing subtopics cleared. Please add new subtopics.\");\r\n  \r\n          while (true) {\r\n            const topicName = prompt(\"Enter topic name (or 'done' to finish): \");\r\n            if (!topicName || topicName.toLowerCase() === 'done') break;\r\n  \r\n            const subtopicName = prompt(\"Enter subtopic name (optional, press Enter to skip): \") || topicName;\r\n            const subtopicId = await getSubtopicId(subtopicName, topicName, connection);\r\n  \r\n            if (subtopicId) {\r\n              await connection.query(\"INSERT INTO Book_SubTopics (ISBN, SubtopicID) VALUES (?, ?)\", [newIsbn, subtopicId]);\r\n              console.log(`Linked '${newTitle}' to topic '${topicName}' and subtopic '${subtopicName}'.`);\r\n            } else {\r\n              console.log(`Cannot link '${newTitle}' to topic '${topicName}' and subtopic '${subtopicName}' as they are not found in the database.`);\r\n            }\r\n          }\r\n        } else if (action === '2') {\r\n          console.log(\"Adding additional subtopics without deleting existing ones.\");\r\n          while (true) {\r\n            const topicName = prompt(\"Enter topic name (or 'done' to finish): \");\r\n            if (!topicName || topicName.toLowerCase() === 'done') break;\r\n  \r\n            const subtopicName = prompt(\"Enter subtopic name (optional, press Enter to skip): \") || topicName;\r\n            const subtopicId = await getSubtopicId(subtopicName, topicName, connection);\r\n  \r\n            if (subtopicId) {\r\n              await connection.query(\"INSERT INTO Book_SubTopics (ISBN, SubtopicID) VALUES (?, ?)\", [newIsbn, subtopicId]);\r\n              console.log(`Linked '${newTitle}' to topic '${topicName}' and subtopic '${subtopicName}'.`);\r\n            } else {\r\n              console.log(`Cannot link '${newTitle}' to topic '${topicName}' and subtopic '${subtopicName}' as they are not found in the database.`);\r\n            }\r\n          }\r\n        } else if (action === '3') {\r\n          console.log(\"No changes made to subtopics; existing subtopics are retained.\");\r\n        } else {\r\n          console.log(\"Invalid choice. No changes made to subtopics.\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error updating book: ${error}`);\r\n    } finally {\r\n      connection.end();\r\n    }\r\n}\r\n\r\n// Find all books related to a given topic\r\nasync function searchBooksByTopic(topicName: string): Promise<void> {\r\n  const connection = await connectToDb();\r\n  if (!connection) {\r\n      console.error(\"Failed to connect to the database.\");\r\n      return;\r\n  }\r\n\r\n  try {\r\n      // Find the topic ID\r\n      const [topicRows] = await connection.execute(\r\n          \"SELECT TopicID FROM Topics WHERE TopicName = ?\",\r\n          [topicName]\r\n      );\r\n\r\n      if (Array.isArray(topicRows) && topicRows.length === 0) {\r\n          console.log(`No topic found with name '${topicName}'.`);\r\n          return;\r\n      }\r\n\r\n      const topicId = (topicRows as any[])[0].TopicID;\r\n\r\n      // Find all books linked to the topic through subtopics\r\n      const [bookRows] = await connection.execute(\r\n          `\r\n          SELECT b.Title, b.Author, b.ISBN, b.BookDesc\r\n          FROM Books b\r\n          JOIN Book_SubTopics bs ON b.ISBN = bs.ISBN\r\n          JOIN Subtopics s ON bs.SubtopicID = s.SubtopicID\r\n          WHERE s.TopicID = ?\r\n          `,\r\n          [topicId]\r\n      );\r\n\r\n      // Display results\r\n      if (Array.isArray(bookRows) && bookRows.length > 0) {\r\n          console.log(`Books related to topic '${topicName}':`);\r\n          bookRows.forEach((book: any) => {\r\n              console.log(`Title: ${book.Title}`);\r\n              console.log(`Author: ${book.Author}`);\r\n              console.log(`ISBN: ${book.ISBN}`);\r\n              console.log(`Description: ${book.BookDesc}`);\r\n              console.log(\"-\".repeat(40));\r\n          });\r\n      } else {\r\n          console.log(`No books found related to topic '${topicName}'.`);\r\n      }\r\n  } catch (error) {\r\n      console.error(\"Error searching for books:\", error);\r\n  } finally {\r\n      await connection.end();\r\n  }\r\n}\r\n\r\nasync function getSubtopicsForBook(bookTitle: string): Promise<string> {\r\n    const connection = await connectToDb();\r\n    if (!connection) {\r\n        console.error(\"Failed to connect to the database.\");\r\n        return \"\";\r\n    }\r\n\r\n    try {\r\n        const [bookResults] = await connection.execute(\r\n            \"SELECT ISBN FROM Books WHERE Title = ?\",\r\n            [bookTitle]\r\n        );\r\n\r\n        if (Array.isArray(bookResults) && bookResults.length === 0) {\r\n            console.log(`No book found with title '${bookTitle}'.`);\r\n            return \"\";\r\n        }\r\n\r\n        const book = (bookResults as any[])[0];\r\n        const ISBN = book.ISBN;\r\n\r\n        const [subtopicResults] = await connection.execute(\r\n            `\r\n            SELECT s.SubtopicName\r\n            FROM Subtopics s\r\n            JOIN Book_SubTopics bs ON s.SubtopicID = bs.SubtopicID\r\n            WHERE bs.ISBN = ?\r\n            `,\r\n            [ISBN]\r\n        );\r\n\r\n        if (Array.isArray(subtopicResults) && subtopicResults.length > 0) {\r\n            return JSON.stringify(subtopicResults);\r\n        } else {\r\n            return \"\";\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(`Database error: ${error}`);\r\n        return \"\";\r\n    } finally {\r\n        await connection.end();\r\n    }\r\n}\r\n\r\n// Find all books related to a given subtopic\r\nasync function searchBooksBySubtopic(subtopicName: string): Promise<string> {\r\n  const connection = await connectToDb();\r\n  if (!connection) {\r\n      console.error(\"Failed to connect to the database.\");\r\n      return \"\";\r\n  }\r\n\r\n  try {\r\n      // Find the subtopic ID\r\n      const [subtopicRows] = await connection.execute(\r\n          \"SELECT SubtopicID FROM Subtopics WHERE SubtopicName = ?\",\r\n          [subtopicName]\r\n      );\r\n\r\n      if (Array.isArray(subtopicRows) && subtopicRows.length === 0) {\r\n          console.log(`No subtopic found with name '${subtopicName}'.`);\r\n          return \"\";\r\n      }\r\n\r\n      const subtopicId = (subtopicRows as any[])[0].SubtopicID;\r\n\r\n      // Find all books linked to the subtopic\r\n      const [bookRows] = await connection.execute(\r\n          `\r\n          SELECT b.Title, b.Author, b.ISBN\r\n          FROM Books b\r\n          JOIN Book_SubTopics bs ON b.ISBN = bs.ISBN\r\n          WHERE bs.SubtopicID = ?\r\n          `,\r\n          [subtopicId]\r\n      );\r\n\r\n      if(Array.isArray(bookRows) && bookRows.length > 0) {\r\n         return JSON.stringify(bookRows);\r\n      }\r\n      else  {\r\n        return \"\";\r\n      }\r\n\r\n      // Display results\r\n  } catch (error) {\r\n      console.error(\"Error searching for books:\", error);\r\n      return \"\";\r\n  } finally {\r\n      await connection.end();\r\n  }\r\n}\r\n\r\nasync function getTopicsForBook(bookTitle: string): Promise<string[]> {\r\n    const connection = await connectToDb();\r\n    if (!connection) {\r\n        console.error(\"Failed to connect to the database.\");\r\n        return [];\r\n    }\r\n\r\n    try {\r\n        // Get the ISBN for the given book title\r\n        const [bookResults] = await connection.execute(\r\n            \"SELECT ISBN FROM Books WHERE Title = ?\",\r\n            [bookTitle]\r\n        );\r\n\r\n        if (Array.isArray(bookResults) && bookResults.length === 0) {\r\n            console.log(`No book found with title '${bookTitle}'.`);\r\n            return [];\r\n        }\r\n\r\n        const book = (bookResults as any[])[0];\r\n        const ISBN = book.ISBN;\r\n\r\n        // Get topics linked to this ISBN through subtopics\r\n        const [topicResults] = await connection.execute(\r\n            `\r\n            SELECT DISTINCT t.TopicName\r\n            FROM Topics t\r\n            JOIN Subtopics s ON t.TopicID = s.TopicID\r\n            JOIN Book_SubTopics bs ON s.SubtopicID = bs.SubtopicID\r\n            WHERE bs.ISBN = ?\r\n            `,\r\n            [ISBN]\r\n        );\r\n\r\n        if (Array.isArray(topicResults) && topicResults.length > 0) {\r\n            return (topicResults as any[]).map(row => row.TopicName);\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(`Database error: ${error}`);\r\n        return [];\r\n    } finally {\r\n        await connection.end();\r\n    }\r\n}\r\n\r\nexport { searchBookByTitle, addBook, dropBook, editBook, getSubtopicsForBook, searchBooksBySubtopic, searchBooksByTopic };"],"names":[],"mappings":"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"}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 541, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/components/book.tsx"],"sourcesContent":["import { Book, Subtopic } from \"@/types\";\r\nimport { Tag } from \"./tag\";\r\nimport { getSubtopicsForBook } from \"./book_entry\";\r\nimport { Plus } from \"phosphor-react\";\r\n\r\nconst BookEntry : React.FC<Book> = async ({ title,author,isbn,bookDesc }) => {\r\n\r\n    let tagsList : string = \"\"\r\n\r\n    await getSubtopicsForBook(title)\r\n        .then(function (response) {\r\n            tagsList = response;\r\n        })\r\n    //let newList = JSON.parse(tagsList)\r\n    \r\n    return(\r\n        <div className=\"flex\">\r\n            <div className=\"w-full p-2 h-fit bg-slate-200 rounded-md border-solid border border-slate-500\">\r\n                <div className=\"flex space-x-4 text-base\">\r\n                    <div className=\"font-bold capitalize\">{ title }</div>\r\n                    <div className=\"grow text-right\"><b>ISBN: </b>{ isbn }</div>\r\n                </div> \r\n                <div className=\"capitalize\">{ author }</div>\r\n                <div className=\"text-sm p-2\">{ bookDesc }</div>\r\n                { tagsList }\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { BookEntry };\r\n\r\n//<div className=\"grow text-right\"><button onClick={() => } className=\"rounded-md\"><Plus size={20} /></button></div>            "],"names":[],"mappings":";;;;AAEA;;;AAGA,MAAM,YAA6B,OAAO,EAAE,KAAK,EAAC,MAAM,EAAC,IAAI,EAAC,QAAQ,EAAE;IAEpE,IAAI,WAAoB;IAExB,MAAM,CAAA,GAAA,uIAAA,CAAA,sBAAmB,AAAD,EAAE,OACrB,IAAI,CAAC,SAAU,QAAQ;QACpB,WAAW;IACf;IACJ,oCAAoC;IAEpC,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC;YAAI,WAAU;;8BACX,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;4BAAI,WAAU;sCAAyB;;;;;;sCACxC,8OAAC;4BAAI,WAAU;;8CAAkB,8OAAC;8CAAE;;;;;;gCAAY;;;;;;;;;;;;;8BAEpD,8OAAC;oBAAI,WAAU;8BAAe;;;;;;8BAC9B,8OAAC;oBAAI,WAAU;8BAAgB;;;;;;gBAC7B;;;;;;;;;;;;AAKlB;;CAIA,gIAAgI"}},
    {"offset": {"line": 624, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 630, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/components/tagTableSearch.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nexport default function TagTable() {\r\n  // State to hold the list of sub-tags to display as checkboxes\r\n  const [subTags, setSubTags] = useState<string[]>([]);\r\n  \r\n  // State to track selected tags across categories\r\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\r\n  const [topics, setTopics] = useState<any[]>([]);\r\n\r\n\r\n  // Function to handle the subTag_View logic and update the displayed sub-tags\r\n  const subTag_View = (selectedValue: \"1\" | \"2\" | \"3\") => {\r\n    const tagOptions = {\r\n      \"1\": [\"Art\", \"Language\", \"Music\"],         // culture sub-tags\r\n      \"2\": [\"Community\", \"Events\", \"Networking\"], // social sub-tags\r\n      \"3\": [\"Parenting\", \"Education\", \"Health\"],  // family sub-tags\r\n    };\r\n\r\n    const newSubTags = tagOptions[selectedValue] || [];\r\n    setSubTags(newSubTags);\r\n  };\r\n\r\n  // Handle change event on the <select> element\r\n  const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const selectedValue = e.target.value as \"1\" | \"2\" | \"3\";\r\n    subTag_View(selectedValue);\r\n  };\r\n\r\n  // Handle checkbox change for each sub-tag\r\n  const handleCheckboxChange = (tag: string) => {\r\n    setSelectedTags((prevSelectedTags) => {\r\n      // Add the tag if it’s not already selected, otherwise remove it\r\n      if (prevSelectedTags.includes(tag)) {\r\n        return prevSelectedTags.filter((t) => t !== tag);\r\n      } else {\r\n        return [...prevSelectedTags, tag];\r\n      }\r\n    });\r\n  };\r\n\r\n  //=====\r\n  useEffect(() => {\r\n    const fetchTopics = async () => {\r\n      try {\r\n        // Call the API endpoint to get the list of topics\r\n        const response = await fetch('/api/getTopics');\r\n        if (response.ok) {\r\n          const data = await response.json();  // Parse the JSON response\r\n          setTopics(data);  // Store topics in the state\r\n        } else {\r\n            console.error('Error fetching topics');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching topics:', error);\r\n      }\r\n    };\r\n\r\n    fetchTopics();\r\n  }, []);\r\n  //=====\r\n\r\n  return (\r\n    <div>\r\n      {/* Dropdown to select the main category */}\r\n      <select\r\n        className=\"form-select\"\r\n        aria-label=\"Default select example\"\r\n        onChange={handleSelectChange}\r\n      >\r\n        <option value=\"0\">Select a tag</option>\r\n        <option value=\"1\">culture</option>\r\n        <option value=\"2\">social</option>\r\n        <option value=\"3\">family</option>\r\n      </select>\r\n\r\n      {/* Render the list of sub-tags with checkboxes */}\r\n      {subTags.length > 0 && (\r\n        <div>\r\n          {subTags.map((tag, index) => (\r\n            <div key={index}>\r\n              <input\r\n                type=\"checkbox\"\r\n                id={tag}\r\n                name={tag}\r\n                value={tag}\r\n                checked={selectedTags.includes(tag)}\r\n                onChange={() => handleCheckboxChange(tag)}\r\n              />\r\n              <label htmlFor={tag}>{tag}</label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Display selected tags */}\r\n      {selectedTags.length > 0 && (\r\n        <div>\r\n          <h3>Selected Tags:</h3>\r\n          <ul>\r\n            {selectedTags.map((tag, index) => (\r\n              <li key={index}>{tag}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IACtB,8DAA8D;IAC9D,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAEnD,iDAAiD;IACjD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAC7D,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAS,EAAE;IAG9C,6EAA6E;IAC7E,MAAM,cAAc,CAAC;QACnB,MAAM,aAAa;YACjB,KAAK;gBAAC;gBAAO;gBAAY;aAAQ;YACjC,KAAK;gBAAC;gBAAa;gBAAU;aAAa;YAC1C,KAAK;gBAAC;gBAAa;gBAAa;aAAS;QAC3C;QAEA,MAAM,aAAa,UAAU,CAAC,cAAc,IAAI,EAAE;QAClD,WAAW;IACb;IAEA,8CAA8C;IAC9C,MAAM,qBAAqB,CAAC;QAC1B,MAAM,gBAAgB,EAAE,MAAM,CAAC,KAAK;QACpC,YAAY;IACd;IAEA,0CAA0C;IAC1C,MAAM,uBAAuB,CAAC;QAC5B,gBAAgB,CAAC;YACf,gEAAgE;YAChE,IAAI,iBAAiB,QAAQ,CAAC,MAAM;gBAClC,OAAO,iBAAiB,MAAM,CAAC,CAAC,IAAM,MAAM;YAC9C,OAAO;gBACL,OAAO;uBAAI;oBAAkB;iBAAI;YACnC;QACF;IACF;IAEA,OAAO;IACP,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,cAAc;YAClB,IAAI;gBACF,kDAAkD;gBAClD,MAAM,WAAW,MAAM,MAAM;gBAC7B,IAAI,SAAS,EAAE,EAAE;oBACf,MAAM,OAAO,MAAM,SAAS,IAAI,IAAK,0BAA0B;oBAC/D,UAAU,OAAQ,4BAA4B;gBAChD,OAAO;oBACH,QAAQ,KAAK,CAAC;gBAClB;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,0BAA0B;YAC1C;QACF;QAEA;IACF,GAAG,EAAE;IACL,OAAO;IAEP,qBACE,8OAAC;;0BAEC,8OAAC;gBACC,WAAU;gBACV,cAAW;gBACX,UAAU;;kCAEV,8OAAC;wBAAO,OAAM;kCAAI;;;;;;kCAClB,8OAAC;wBAAO,OAAM;kCAAI;;;;;;kCAClB,8OAAC;wBAAO,OAAM;kCAAI;;;;;;kCAClB,8OAAC;wBAAO,OAAM;kCAAI;;;;;;;;;;;;YAInB,QAAQ,MAAM,GAAG,mBAChB,8OAAC;0BACE,QAAQ,GAAG,CAAC,CAAC,KAAK,sBACjB,8OAAC;;0CACC,8OAAC;gCACC,MAAK;gCACL,IAAI;gCACJ,MAAM;gCACN,OAAO;gCACP,SAAS,aAAa,QAAQ,CAAC;gCAC/B,UAAU,IAAM,qBAAqB;;;;;;0CAEvC,8OAAC;gCAAM,SAAS;0CAAM;;;;;;;uBATd;;;;;;;;;;YAgBf,aAAa,MAAM,GAAG,mBACrB,8OAAC;;kCACC,8OAAC;kCAAG;;;;;;kCACJ,8OAAC;kCACE,aAAa,GAAG,CAAC,CAAC,KAAK,sBACtB,8OAAC;0CAAgB;+BAAR;;;;;;;;;;;;;;;;;;;;;;AAOvB"}},
    {"offset": {"line": 818, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 824, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/components/filters/search.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport TagTable from \"../tagTableSearch\";\r\nimport axios from \"axios\";\r\nimport { useState,  useEffect } from 'react';\r\n\r\n\r\nconst SearchBlock : React.FC = () => {\r\n\r\n    const [selectedTags, setSelectedTags] = useState<string[]>([]);\r\n\r\n    let test : string = selectedTags[0];\r\n\r\n    const searchSubmit = async (event: React.FormEvent) => {\r\n        return test;\r\n    };\r\n\r\n    return (\r\n        <div className = \"flex fixed left-0 h-full bg-slate-200 overscroll-contain w-48 grid grid-cols-1 justify-top\">\r\n            <form onSubmit={searchSubmit}>        \r\n                <h2 className=\"grow-0\">Search</h2>\r\n                {/*<SearchBar  />*/}\r\n                <p>Search by Tags</p>\r\n                <TagTable />\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default SearchBlock;"],"names":[],"mappings":";;;;AAEA;AAEA;AAJA;;;;AAOA,MAAM,cAAyB;IAE3B,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAE7D,IAAI,OAAgB,YAAY,CAAC,EAAE;IAEnC,MAAM,eAAe,OAAO;QACxB,OAAO;IACX;IAEA,qBACI,8OAAC;QAAI,WAAY;kBACb,cAAA,8OAAC;YAAK,UAAU;;8BACZ,8OAAC;oBAAG,WAAU;8BAAS;;;;;;8BAEvB,8OAAC;8BAAE;;;;;;8BACH,8OAAC,2IAAA,CAAA,UAAQ;;;;;8BACT,8OAAC;oBAAO,MAAK;8BAAS;;;;;;;;;;;;;;;;;AAItC;uCAIe"}},
    {"offset": {"line": 886, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 948, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/search/page.tsx"],"sourcesContent":["import { Book } from \"@/types\";\r\nimport axios from \"axios\";\r\nimport { BookEntry } from \"../components/book\";\r\nimport SearchBlock from \"@/app/components/filters/search\"\r\nimport { searchBooksBySubtopic } from \"../components/book_entry\";\r\n\r\nexport default async function Home() {\r\n\r\n    let booksList : string = \"\";\r\n    let newList : string = \"\";\r\n\r\n        await axios\r\n        .get('http://localhost:3000/api/books', {responseType : \"json\"})\r\n        //use the form response URL mods here???\r\n        .then(function (response) {\r\n            booksList = response.data;\r\n        })\r\n        .catch((err) => console.log(\"couldn't read db\"));\r\n\r\n        let tag : string = (\"music\")\r\n        await searchBooksBySubtopic(tag)\r\n            .then(function (response) {\r\n                booksList = response;\r\n            })\r\n            booksList = JSON.parse(newList)\r\n\r\n\r\n    let bookArray = booksList.map((book : Book) => {\r\n        // map is highlighted as an error here but it's working anyway?\r\n        return (\r\n            <BookEntry key={book.ISBN} title={book.Title} author={book.Author} isbn={book.ISBN} bookDesc={book.Description} />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"flex space-x-10\">\r\n            <SearchBlock />\r\n            <div className = \"flex w-48\" />\r\n            <div className = \"flex w-fit\">\r\n                <div className=\"right-0 grid grid-cols-2 p-5 gap-5\">\r\n                    { bookArray }\r\n                </div>  \r\n            </div>         \r\n        </div>             \r\n    );\r\n};"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAHA;;;;;;AAKe,eAAe;IAE1B,IAAI,YAAqB;IACzB,IAAI,UAAmB;IAEnB,MAAM,qIAAA,CAAA,UAAK,CACV,GAAG,CAAC,mCAAmC;QAAC,cAAe;IAAM,EAC9D,wCAAwC;KACvC,IAAI,CAAC,SAAU,QAAQ;QACpB,YAAY,SAAS,IAAI;IAC7B,GACC,KAAK,CAAC,CAAC,MAAQ,QAAQ,GAAG,CAAC;IAE5B,IAAI,MAAgB;IACpB,MAAM,CAAA,GAAA,uIAAA,CAAA,wBAAqB,AAAD,EAAE,KACvB,IAAI,CAAC,SAAU,QAAQ;QACpB,YAAY;IAChB;IACA,YAAY,KAAK,KAAK,CAAC;IAG/B,IAAI,YAAY,UAAU,GAAG,CAAC,CAAC;QAC3B,+DAA+D;QAC/D,qBACI,8OAAC,iIAAA,CAAA,YAAS;YAAiB,OAAO,KAAK,KAAK;YAAE,QAAQ,KAAK,MAAM;YAAE,MAAM,KAAK,IAAI;YAAE,UAAU,KAAK,WAAW;WAA9F,KAAK,IAAI;;;;;IAEjC;IAEA,qBACI,8OAAC;QAAI,WAAU;;0BACX,8OAAC,8IAAA,CAAA,UAAW;;;;;0BACZ,8OAAC;gBAAI,WAAY;;;;;;0BACjB,8OAAC;gBAAI,WAAY;0BACb,cAAA,8OAAC;oBAAI,WAAU;8BACT;;;;;;;;;;;;;;;;;AAKtB"}},
    {"offset": {"line": 1025, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}