{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/components/booksContainer.tsx"],"sourcesContent":["// perhaps\r\nimport React from \"react\";\r\nimport { BookEntry } from \"./book\";\r\nimport { Book } from \"@/types\";\r\nimport { GET_BOOKS } from \"@/backend/route\";\r\n\r\n// use this for search and for bookmarks\r\n// search: take directly from db\r\n// bookmarks: figure out a different call\r\n\r\n\r\n\r\n\r\nconst BooksContainer : React.FC<Book> = (props) => {\r\n\r\nlet booksList = GET_BOOKS\r\nbooksList.forEach(element => {\r\n    \r\n});\r\n\r\n/*\r\nessentially:\r\ntake an input somehow of every book you want included\r\nrun a for() to make a new book \"entry\" for each one\r\nfill the container \r\n\r\nthis should work then to port over both the db and to do bookmarks, smaller searches, whatever\r\nstorage and rendering need to happen separately\r\nit does mean that the thing will need to generate all the new items every time a different page is loaded...?\r\n*/\r\n\r\n\r\n    return(\r\n        <div className=\"grid grid-cols-2 place-content-start p-5 gap-5\">\r\n            <BookEntry Title={\"\"} Author={\"\"} ISBN={\"\"} PublicationYear={0} />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BooksContainer;"],"names":[],"mappings":"AAAA,UAAU;;;;;AAEV;AAEA;;;;AAEA,wCAAwC;AACxC,gCAAgC;AAChC,yCAAyC;AAKzC,MAAM,iBAAkC,CAAC;IAEzC,IAAI,YAAY,uHAAA,CAAA,YAAS;IACzB,UAAU,OAAO,CAAC,CAAA,WAElB;IAEA;;;;;;;;;AASA,GAGI,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC,iIAAA,CAAA,YAAS;YAAC,OAAO;YAAI,QAAQ;YAAI,MAAM;YAAI,iBAAiB;;;;;;;;;;;AAIzE;uCAEe"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/bookmarks/page.tsx"],"sourcesContent":["import BooksContainer from \"../components/booksContainer\";\r\nimport { Book } from \"@/types\";\r\n\r\nexport default function Home() {\r\n    const bookmarks: Book[] = [];\r\n    \r\n    return (\r\n        <div>\r\n            <h1>bookmarks test</h1>\r\n            <BooksContainer />\r\n        </div>      \r\n    );\r\n  }\r\n  "],"names":[],"mappings":";;;;AAAA;;;AAGe,SAAS;IACpB,MAAM,YAAoB,EAAE;IAE5B,qBACI,8OAAC;;0BACG,8OAAC;0BAAG;;;;;;0BACJ,8OAAC,2IAAA,CAAA,UAAc;;;;;;;;;;;AAGzB"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/.next-internal/server/app/bookmarks/page/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AAeA,cAAc;AAdd,SAASA,kBAAkB,QAAQ,2DAA2D;IAAE,wBAAwB;AAAW,EAAC;AAYpI,yEAAyE;AAKzE,SAASE,IAAI,EAAEC,KAAK,GAAE;AAStB,iCAAiC;;;;;;;;AAEjC,OAAO,MAAMG,eAAe,6CAAA;IAC1BC,MAAAA,GAASC;IACTC,EAAAA,OAAAA;IAAAA,CAAWC;IAAAA;QACb,EAAC,UAAA;YAAA;YAAA;gBAED,YAAA;oBAAA,CAAc;oBAAA,CAEd,yBAFkD;oBAElD,yDAA4D;wBAC5D,KAAO,KAAA,CAAMC;wBAAAA,QAAc;4BAAA,GAAIX,CAAAA,gBAAmB;4BAAA;yBAAA;;mBAChDY,YAAY;;iBACVC,MAAMZ,UAAUa,QAAQ;sBACxBC,IAAAA,CAAM,CAAA;YAAA;SAAA;;SACNC,UAAU;cACV,IAAA;YAAA,MAAA,4BAA2C;iBAC3CC,MAAAA,MAAY,EAAA;wBAAA;4BACZC,KAAAA,CAAAA,GAAAA,CAAU,0KAAVA,CAAAA,sBAAU,EAAA,MAAA,MAAA,MAAA,EAAA,iBAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,CAAA,KAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;4BACVC,OAAAA,qTAAU,EAAE,QAAA,CAAA,KAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,MAAA,EAAA;4BACd,MAAA,CAAA,YAAA,CAAA;wBACAC;qBAAAA,MAAU;gBACRC,YAAYnB;UACd;QAAA,UAAA;YAAA,IAAA;YAAA;SAAA;QACF,CAAE,YAAA;YAAA,IAAA;YAAA;SAAA"}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}