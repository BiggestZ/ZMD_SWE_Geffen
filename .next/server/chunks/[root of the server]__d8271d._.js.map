{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/books/route.ts"],"sourcesContent":["\r\nimport { NextResponse } from 'next/server';\r\nimport connectToDB from '@/app/components/connectToDB';\r\nimport { getAllBooks,getAllSubtopics } from '@/app/components/book_entry';\r\nimport { Book } from '@/types';\r\n\r\nexport async function GET(req: Request) {\r\n  try {\r\n    const { searchParams } = new URL(req.url);\r\n    const subtopic = searchParams.get(\"subtopic\");\r\n\r\n    // Connect to the database\r\n    const connection = await connectToDB();\r\n    if (!connection) {\r\n      return NextResponse.json(\r\n        { message: 'books database connection failed' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    // Search for books in the database\r\n    //const books = await getBookByTitle(title); \r\n    const booksList = await getAllBooks();\r\n\r\n    let bookArray : Array<Book> = booksList.map((book : Book) => {\r\n\r\n        let newBook : Book = {\r\n            title: book.Title,\r\n            author: book.Author,\r\n            isbn: book.ISBN,\r\n            bookDesc: book.Description,\r\n            tagsList: [],\r\n            topicsList: []\r\n        }\r\n\r\n        return(newBook)\r\n    })\r\n\r\n    function matchBooks(booksArray : Array<Book>, filter: string) : Array<Book> {\r\n        \r\n        let finalList : Array<Book> = []\r\n\r\n        let test = booksList[filter]\r\n\r\n        for (const name of test) {\r\n            for (const book of booksArray) {\r\n                if (book.title == name) {\r\n                    finalList.push(book)\r\n                }\r\n            }\r\n        }\r\n            return finalList;\r\n        }\r\n\r\n    let filteredBooks : Array<Book> = []\r\n\r\n    if(!subtopic){\r\n        filteredBooks = bookArray\r\n    }\r\n    else {  \r\n        filteredBooks = matchBooks(bookArray,subtopic);\r\n    }\r\n\r\n    let subtopicsList = getAllSubtopics();\r\n\r\n    // Return the found books\r\n    return NextResponse.json({ message: 'Books retrieved successfully', filteredBooks, subtopicsList });\r\n  } catch (error) {\r\n    console.error('Error in searchBooks API:', error);\r\n    return NextResponse.json(\r\n      { message: 'Internal Server Error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AACA;AACA;AACA;;;;AAGO,eAAe,IAAI,GAAY;IACpC,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;QACxC,MAAM,WAAW,aAAa,GAAG,CAAC;QAElC,0BAA0B;QAC1B,MAAM,aAAa,MAAM,CAAA,GAAA,0IAAA,CAAA,UAAW,AAAD;QACnC,IAAI,CAAC,YAAY;YACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAmC,GAC9C;gBAAE,QAAQ;YAAI;QAElB;QAEA,mCAAmC;QACnC,6CAA6C;QAC7C,MAAM,YAAY,MAAM,CAAA,GAAA,yIAAA,CAAA,cAAW,AAAD;QAElC,IAAI,YAA0B,UAAU,GAAG,CAAC,CAAC;YAEzC,IAAI,UAAiB;gBACjB,OAAO,KAAK,KAAK;gBACjB,QAAQ,KAAK,MAAM;gBACnB,MAAM,KAAK,IAAI;gBACf,UAAU,KAAK,WAAW;gBAC1B,UAAU,EAAE;gBACZ,YAAY,EAAE;YAClB;YAEA,OAAO;QACX;QAEA,SAAS,WAAW,UAAwB,EAAE,MAAc;YAExD,IAAI,YAA0B,EAAE;YAEhC,IAAI,OAAO,SAAS,CAAC,OAAO;YAE5B,KAAK,MAAM,QAAQ,KAAM;gBACrB,KAAK,MAAM,QAAQ,WAAY;oBAC3B,IAAI,KAAK,KAAK,IAAI,MAAM;wBACpB,UAAU,IAAI,CAAC;oBACnB;gBACJ;YACJ;YACI,OAAO;QACX;QAEJ,IAAI,gBAA8B,EAAE;QAEpC,IAAG,CAAC,UAAS;YACT,gBAAgB;QACpB,OACK;YACD,gBAAgB,WAAW,WAAU;QACzC;QAEA,IAAI,gBAAgB,CAAA,GAAA,yIAAA,CAAA,kBAAe,AAAD;QAElC,yBAAyB;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAgC;YAAe;QAAc;IACnG,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}